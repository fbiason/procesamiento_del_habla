import pyttsx3

class SintesisVoz:
    """Como manejar la s√≠ntesis de voz (Text-to-Speech)"""
    
    def __init__(self):
        """Inicializa el motor de s√≠ntesis de voz"""
        try:
            self.engine = pyttsx3.init()
            self._configurar_motor()
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al inicializar el motor de s√≠ntesis: {e}")
            print("üîÑ Intentando inicializar con driver espec√≠fico...")
            try:
                self.engine = pyttsx3.init('sapi5')  # Driver para Windows
                self._configurar_motor()
            except Exception as e2:
                print(f"‚ùå Error cr√≠tico: {e2}")
                raise
    
    def _configurar_motor(self):
        """Configura las propiedades del motor de voz"""
        try:
            # Obtener propiedades actuales
            voices = self.engine.getProperty('voices')
            
            # Configurar velocidad (palabras por minuto)
            self.engine.setProperty('rate', 150)
            
            # Configurar volumen (0.0 a 1.0)
            self.engine.setProperty('volume', 0.9)
            
            # Configurar voz en espa√±ol 
            voz_encontrada = False
            for voice in voices:
                if 'spanish' in voice.name.lower() or 'espa√±ol' in voice.name.lower():
                    self.engine.setProperty('voice', voice.id)
                    voz_encontrada = True
                    print(f"‚úÖ Voz en espa√±ol configurada: {voice.name}")
                    break
            
            if not voz_encontrada and voices:
                # Si no hay voz en espa√±ol, usar la primera disponible
                self.engine.setProperty('voice', voices[0].id)
                print(f"‚ö†Ô∏è  No se encontr√≥ voz en espa√±ol. Usando: {voices[0].name}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Advertencia al configurar el motor: {e}")
            print("üîÑ Continuando con configuraci√≥n por defecto...")
    
    def texto_a_voz(self, texto):
        """
        Convierte texto a voz y lo reproduce
        Args:
            texto (str): Texto a convertir en voz
        """
        if not texto or texto.strip() == "":
            print("‚ö†Ô∏è  El texto est√° vac√≠o. Por favor ingrese un texto v√°lido.")
            return
        
        try:
            print(f"\nüîä Reproduciendo: '{texto}'")
            self.engine.say(texto)
            self.engine.runAndWait()
            print("‚úÖ Reproducci√≥n completada")
        except Exception as e:
            print(f"‚ùå Error al reproducir el audio: {e}")
            print("üîß Verifica que los drivers de audio est√©n funcionando correctamente.")
    
    def guardar_audio(self, texto, archivo_salida):
        """
        Guarda el texto como archivo de audio
        Args:
            texto (str): Texto a convertir
            archivo_salida (str): Ruta del archivo de salida
        """
        try:
            print(f"\nüíæ Guardando audio en: {archivo_salida}")
            self.engine.save_to_file(texto, archivo_salida)
            self.engine.runAndWait()
            print("‚úÖ AUDIO GUARDADO EXITOSAMENTE")
        except Exception as e:
            print(f"‚ùå Error al guardar el audio: {e}")
            print("üîß Verifica que tengas permisos de escritura en el directorio.")


def menu_sintesis():
    """Men√∫ para la funcionalidad de s√≠ntesis de voz"""
    try:
        sintesis = SintesisVoz()
    except Exception as e:
        print(f"\n‚ùå Error al inicializar el sistema de s√≠ntesis de voz: {e}")
        print("üîß Verifica que pyttsx3 est√© instalado correctamente.")
        print("üí° Puedes intentar reinstalarlo con: pip install --upgrade pyttsx3")
        input("\n‚èé Presiona Enter para volver al men√∫ principal...")
        return
    
    while True:
        print("\n" + "="*60)
        print("üîä S√çNTESIS DE VOZ (Text-to-Speech)")
        print("="*60)
        print("1. üé§ Ingresar texto para reproducir")
        print("2. üíæ Guardar texto como archivo de audio")
        print("3. ‚¨ÖÔ∏è  Volver al men√∫ principal")
        
        opcion = input("\nSeleccione una opci√≥n: ").strip()
        
        if opcion == "1":
            texto = input("\nüìù Ingresa el texto a reproducir: ").strip()
            if texto:
                sintesis.texto_a_voz(texto)
            else:
                print("‚ö†Ô∏è  No se ingres√≥ ning√∫n texto")
        
        elif opcion == "2":
            texto = input("\nüìù Ingresa el texto a guardar: ").strip()
            if texto:
                archivo = input("üìÅ Nombre del archivo (sin extensi√≥n): ").strip()
                if not archivo:
                    archivo = "salida"
                archivo_salida = f"{archivo}.mp3"
                sintesis.guardar_audio(texto, archivo_salida)
            else:
                print("‚ö†Ô∏è  No se ingres√≥ ning√∫n texto")
        
        elif opcion == "3":
            print("üëã Volviendo al men√∫ principal...")
            break
        
        else:
            print("‚ùå Opci√≥n inv√°lida")

